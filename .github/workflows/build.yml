name: Build Docker Image

on:
  pull_request:
    types:
      - opened
      - synchronize
      - reopened

jobs:
  docker-build:
    name: Build & publish Docker images
    runs-on: ubuntu-latest
    permissions:
      packages: write
    strategy:
      matrix:
        target:
          - name: builder
            image: action-release-builder-image
          - name: app
            image: action-release-image
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract docker tag from action.yml
        run: |
          TAG=$(yq '... | select(has("uses") and .uses | test("docker://ghcr.io/getsentry/action-release-image:.*")) | .uses' action.yml | awk -F':' '{print $3}')
          echo "DOCKER_TAG=$TAG" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # BUILDKIT_INLINE_CACHE creates the image in such a way that you can
      # then use --cache-from (think of a remote cache)
      # This feature is allowed thanks to using the buildx plugin
      #
      # There's a COPY command in the builder stage that can easily invalidate the cache
      # If you notice, please add more exceptions to .dockerignore since we loose the value
      # of using --cache-from on the app stage
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ matrix.target.image }}:${{ env.DOCKER_TAG }}
          cache-from: ghcr.io/${{ github.repository_owner }}/${{ matrix.target.image }}:master
          target: ${{ matrix.target.name }}
          build-args: BUILDKIT_INLINE_CACHE=1